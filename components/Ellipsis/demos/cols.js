define([], function () {
  return {
    title: 'Cols组件用法',
    file: 'cols',
    demo: function () {
      return {
        component: 'Cols',
        children: [
          {
            ellipsis: true,
            children:
              '下面是一段超长文字系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类',
          },
          {
            ellipsis: true,
            children:
              '下面是一段超长文字系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类',
          },
          {
            ellipsis: true,
            children:
              '下面是一段超长文字系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类系统定义了大量原子类，如果直接做为字符串类型 prop 应用到组件上，使用起来会非常不方便，所以设计了一个机制来应用原子类，即通过 object 类型的名为 styles 的 prop 来应用各种原子类',
          },
        ],
      }
    },
  }
})
